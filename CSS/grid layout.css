/* Grid also introduces a new unit, the fractional fr. Each fr unit allocates one share of the available space. 
For example, if two elements are set to 1fr and 3fr respectively, the space is divided into 4 equal shares; 
the first element occupies 1/4 and the second element 3/4 of any leftover space. 
When columns are set with pixels, percentages, or ems, any other columns set with fr will divide up the space that's left over.

Here the carrots form a 50 pixel column on the left, and the weeds a 50 pixel column on the right. 
With grid-template-columns, create these two columns, and use fr to make three more columns that take up the remaining space in between.*/


* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    min-height: 100vh;

    /* making body grid */
    display: grid;
    grid-template-columns: repeat(9, 1fr);    /* grid-template is a shorthand property that combines grid-template-rows and grid-template-columns.
                                               grid-template: [rows] / [columns]; For example, grid-template: 50% 50% / 20% 200px; will create a grid with two rows that are 50% each, 
                                               First column takes 20% of the width Second column is fixed at 200px. */
    grid-auto-rows: 75px auto 75px;
    grid-template-areas:                       /* It is used with CSS Grid layouts to define named areas on a grid.
                                                    It lets you visually lay out your grid in a way that's easy to read and understand */
              "hd hd hd hd hd hd hd hd hd"
              "mn mn mn mn mn mn mn sb sb"
              "ft ft ft ft ft ft ft ft ft";
    gap: 1rem;
}

.el {
    background-color: aquamarine;
    color: black;
    display: grid;
    place-content: center;
}

.header {
    grid-area: hd;
    background-color: violet;
}

.sidebar {
    grid-area: sb;
    background-color: blue;
}

.footer {
    grid-area: ft;
}

.box {
    background-color: black;
    color: whitesmoke;
    font-size: 2rem;
    padding: 0.5rem;
}

.container {
    grid-area: mn;
    min-height: 400px;
    display: grid;  /* making container a grid via column*/
    grid-template-columns: repeat(2, 1fr 2fr); /* 4 columns and 1 fraction(fr is used in css grid specifically) */
    grid-auto-rows: minmax(150px, auto); /* the box can stretch than 150px if container is lager but will not shrink than 150px */  /* we can also use simple 250px */
       /* grid-template-rows can also be used but grid-auto-rows: sets rows automatically this can also be done in the below case */
    gap: 1rem 0.5rem; /* 1st row then column */
}

/* .container {
    display: grid;   we can also make a grid through rows
    grid-template-rows: repeat(2, 1fr 2fr);
    grid-auto-columns: minmax(150px, auto); 
} */

.box:first-child {
    background-color: blueviolet;
    /* grid-column-start: 1;
    grid-column-end: 4;
          OR */
    grid-column: 1 / 4;
    grid-row: 1 / 3;  /* IMP- grid-area can also be used for the whole 2D meaning setting row and column at the same time by using 4 slashes
                             grid-area: row-start / column-start / row-end / column-end; */

    /* nested grid */
    display: grid;
    /* align-content: center;
    justify-content: center;
          OR */
    place-content: end center; /* 1st vertical then horizontal and if 1 put a singular vlue like center it will apply for both */
}

.box:nth-child(2) {
    background-color: aqua;
    grid-column: 1/5;
    grid-row: 3 / 4;
}




